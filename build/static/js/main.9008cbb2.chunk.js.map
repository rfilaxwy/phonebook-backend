{"version":3,"sources":["services/persons.js","addNameform.js","numberList.js","title.js","filter.js","message.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","newPerson","axios","post","then","response","data","get","id","delete","AddNameForm","props","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","onClick","add","NumberList","numbersArray","persons","searchName","deletePerson","length","filter","person","name","toLowerCase","includes","map","key","number","Title","title","Filter","handleSeachName","stylesSuccess","border","backgroundColor","fontWeight","stylesFail","Message","successMessage","failMessage","style","App","useState","setPersons","setNewName","setNewNumber","setSearchName","setSuccessMessage","setFailMessage","useEffect","personService","res","search","e","target","preventDefault","concat","setTimeout","window","confirm","newPersons","x","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9008cbb2.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst addPerson = (newPerson) => {\r\n  const request = axios.post(baseUrl, newPerson);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst getAllPerson = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst deletePerson = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst updateNumber = (person) => {\r\n  const request = axios.put(`${baseUrl}/${person.id}`, person);\r\n  return request\r\n    .then((response) => response.data)\r\n    .catch((response) => response.err(\"failed\"));\r\n};\r\n\r\nexport default { addPerson, getAllPerson, deletePerson, updateNumber };\r\n","import React from \"react\";\r\n\r\nconst AddNameForm = props => (\r\n  <form>\r\n    <div>\r\n      name: <input value={props.newName} onChange={props.handleNameChange} />\r\n    </div>\r\n    <div>\r\n      phonenumber:{\" \"}\r\n      <input value={props.newNumber} onChange={props.handleNumberChange} />\r\n    </div>\r\n    <div>\r\n      <button onClick={props.add}>add</button>\r\n    </div>\r\n  </form>\r\n);\r\n\r\nexport default AddNameForm;\r\n","import React from \"react\";\r\n\r\nconst NumberList = ({ persons, searchName, deletePerson }) => {\r\n  let numbersArray;\r\n\r\n  if (searchName.length > 0) {\r\n    numbersArray = persons\r\n      .filter((person) => {\r\n        let personName = person.name.toLowerCase();\r\n        return personName.includes(searchName);\r\n      })\r\n      .map((person) => (\r\n        <div key={person.name}>\r\n          <p>{`${person.name}    ${person.number}`}</p>\r\n          <button\r\n            onClick={() => {\r\n              deletePerson(person.id);\r\n            }}\r\n          >\r\n            delete\r\n          </button>\r\n        </div>\r\n      ));\r\n  } else {\r\n    numbersArray = persons.map((person) => (\r\n      <div key={person.name}>\r\n        <p>{`${person.name}    ${person.number}`}</p>\r\n        <button\r\n          onClick={() => {\r\n            deletePerson(person.id, person.name);\r\n          }}\r\n        >\r\n          delete\r\n        </button>\r\n      </div>\r\n    ));\r\n  }\r\n  return <div>{numbersArray}</div>;\r\n};\r\nexport default NumberList;\r\n","import React from \"react\";\r\n\r\nconst Title = ({ title }) => <h2>{title}</h2>;\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\n\r\nconst Filter = ({ searchName, handleSeachName }) => (\r\n  <div>\r\n    filter shown with <input value={searchName} onChange={handleSeachName} />\r\n  </div>\r\n);\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nconst stylesSuccess = {\r\n  border: \"2px solid green\",\r\n  backgroundColor: \"lightgray\",\r\n  fontWeight: \"bold\",\r\n};\r\nconst stylesFail = {\r\n  border: \"2px solid red\",\r\n  backgroundColor: \"lightgray\",\r\n  fontWeight: \"bold\",\r\n};\r\nconst Message = (props) => {\r\n  if (props.successMessage === null && props.failMessage === null) {\r\n    return null;\r\n  }\r\n  return props.failMessage ? (\r\n    <div style={stylesFail}>{props.failMessage}</div>\r\n  ) : (\r\n    <div style={stylesSuccess}>{props.successMessage}</div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React, { useState, useEffect } from \"react\";\nimport personService from \"./services/persons\";\n\n//Components\nimport AddNameForm from \"./addNameform\";\nimport NumberList from \"./numberList\";\nimport Title from \"./title\";\nimport Filter from \"./filter\";\nimport Message from \"./message\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [searchName, setSearchName] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [failMessage, setFailMessage] = useState(null);\n\n  const hook = () => {\n    personService.getAllPerson().then((res) => setPersons(res));\n  };\n\n  useEffect(hook, []);\n\n  const handleNameChange = (e) => {\n    setNewName(e.target.value);\n  };\n  const handleNumberChange = (e) => {\n    setNewNumber(e.target.value);\n  };\n  const handleSeachName = (e) => {\n    setSearchName(e.target.value.toLowerCase());\n  };\n\n  // const notDuplicateName = () => {\n  //   for (let i = 0; i < persons.length; i++) {\n  //     if (persons[i].name === newName) {\n  //       return false;\n  //     }\n  //   }\n  //   return true;\n  // };\n\n  const clearFields = () => {\n    setNewNumber(\"\");\n    setNewName(\"\");\n    setTimeout(() => {\n      setSuccessMessage(null);\n      setFailMessage(null);\n    }, 6000);\n  };\n\n  const add = (e) => {\n    e.preventDefault();\n    // let notDuplicate = notDuplicateName();\n\n    // if (notDuplicate) {\n    const newPerson = { name: newName, number: newNumber };\n    personService.addPerson(newPerson).then((response) => {\n      setPersons(persons.concat(newPerson));\n      setSuccessMessage(`${newName} was added to phonebook.`);\n    });\n    clearFields();\n    // } else {\n    //   if (\n    //     window.confirm(\n    //       `${newName} was already added to phonebook are you sure you want to update number?`\n    //     )\n    // ) {\n    //   const updateperson = persons.find((person) => person.name === newName);\n    //   updateperson.number = newNumber;\n    //   personService\n    //     .updateNumber(updateperson)\n    //     .then((response) => {\n    //       setPersons(\n    //         persons.map((person) =>\n    //           person.name !== response.name ? person : response\n    //         )\n    //       );\n    //     })\n    //     .catch((err) => {\n    //       setFailMessage(`${newName} does not exist in db.`);\n    //       setTimeout(hook, 5000);\n    //     });\n\n    //   clearFields();\n    // }\n  };\n\n  const deleteP = (id, name) => {\n    if (window.confirm(`Delete ${name}?`)) {\n      personService.deletePerson(id).then(() => {\n        let newPersons = persons.filter((x) => x.id !== id);\n        setPersons(newPersons);\n      });\n    }\n  };\n\n  return (\n    <div>\n      <Title title=\"Phonebook\" />\n      <Filter search={searchName} handleSeachName={handleSeachName} />\n      <Message successMessage={successMessage} failMessage={failMessage} />\n      <Title title=\"add a new\" />\n      <AddNameForm\n        add={add}\n        newNumber={newNumber}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <Title title=\"Numbers\" />\n      <NumberList\n        searchName={searchName}\n        persons={persons}\n        deletePerson={deleteP}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}